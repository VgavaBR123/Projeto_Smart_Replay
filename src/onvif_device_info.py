#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para obter informa√ß√µes de dispositivos de c√¢meras IP usando protocolo ONVIF
Especificamente para c√¢meras Motorola IP DOME 2MP modelo MTIDM022603
"""

import os
import sys
from urllib.parse import urlparse
import json
import uuid
from datetime import datetime
from pathlib import Path
import glob

try:
    from onvif import ONVIFCamera
    from onvif.exceptions import ONVIFError
except ImportError:
    print("‚ùå Biblioteca ONVIF n√£o encontrada!")
    print("   Instale com: pip install onvif-zeep")
    sys.exit(1)

class ONVIFDeviceManager:
    """
    Gerenciador de informa√ß√µes ONVIF para c√¢meras IP
    """
    
    def __init__(self):
        # Pasta device_config na raiz do projeto (pasta pai da src)
        self.device_config_dir = Path(__file__).parent.parent / "device_config"
        self.device_config_dir.mkdir(exist_ok=True)
        
    def verificar_arquivo_existente(self):
        """
        Verifica se j√° existe um arquivo camera_onvif_info_*.json na pasta device_config
        
        Returns:
            dict: Informa√ß√µes sobre arquivo existente ou None se n√£o existe
        """
        try:
            # Procura por arquivos com padr√£o camera_onvif_info_*.json
            pattern = str(self.device_config_dir / "camera_onvif_info_*.json")
            arquivos_existentes = glob.glob(pattern)
            
            if arquivos_existentes:
                # Pega o arquivo mais recente
                arquivo_mais_recente = max(arquivos_existentes, key=os.path.getctime)
                arquivo_path = Path(arquivo_mais_recente)
                
                # Carrega e valida o conte√∫do
                try:
                    with open(arquivo_path, 'r', encoding='utf-8') as f:
                        dados = json.load(f)
                    
                    # Verifica se tem pelo menos uma c√¢mera com UUID v√°lido
                    cameras_validas = 0
                    for camera_key, camera_data in dados.items():
                        if camera_key.startswith('camera_') and isinstance(camera_data, dict):
                            dispositivo = camera_data.get('dispositivo', {})
                            if dispositivo.get('device_uuid') and dispositivo.get('device_uuid') != 'N/A':
                                cameras_validas += 1
                    
                    if cameras_validas > 0:
                        print(f"üìã Arquivo ONVIF existente encontrado: {arquivo_path.name}")
                        print(f"   üìÖ Criado em: {datetime.fromtimestamp(arquivo_path.stat().st_ctime).strftime('%Y-%m-%d %H:%M:%S')}")
                        print(f"   üìπ C√¢meras v√°lidas: {cameras_validas}")
                        
                        return {
                            'existe': True,
                            'arquivo': arquivo_path,
                            'dados': dados,
                            'cameras_validas': cameras_validas,
                            'timestamp_criacao': arquivo_path.stat().st_ctime
                        }
                    else:
                        print(f"‚ö†Ô∏è Arquivo encontrado mas sem c√¢meras v√°lidas: {arquivo_path.name}")
                        return None
                        
                except (json.JSONDecodeError, Exception) as e:
                    print(f"‚ùå Erro ao ler arquivo existente {arquivo_path.name}: {e}")
                    return None
            else:
                print("üìã Nenhum arquivo ONVIF existente encontrado")
                return None
                
        except Exception as e:
            print(f"‚ùå Erro ao verificar arquivos existentes: {e}")
            return None
    
    def obter_informacoes_cameras(self, force_recreate=False):
        """
        Obt√©m informa√ß√µes das c√¢meras, reutilizando arquivo existente se poss√≠vel
        
        Args:
            force_recreate (bool): For√ßa recria√ß√£o mesmo se arquivo existir
            
        Returns:
            dict: Informa√ß√µes das c√¢meras ou None se falhou
        """
        print("\nüé• === VERIFICA√á√ÉO DE INFORMA√á√ïES ONVIF DAS C√ÇMERAS ===")
        print("-" * 60)
        
        # Verifica arquivo existente
        if not force_recreate:
            arquivo_existente = self.verificar_arquivo_existente()
            if arquivo_existente:
                print("‚úÖ Reutilizando informa√ß√µes ONVIF existentes (sem recriar)")
                return arquivo_existente['dados']
        
        # Se chegou aqui, precisa criar novo arquivo
        print("üîÑ Criando novo arquivo de informa√ß√µes ONVIF...")
        return self._executar_scan_completo()
    
    def _executar_scan_completo(self):
        """
        Executa o scan completo das c√¢meras ONVIF
        
        Returns:
            dict: Informa√ß√µes das c√¢meras
        """
        # Carrega configura√ß√µes
        config = self._carregar_configuracoes()
        if not config:
            return None
        
        # Identifica as c√¢meras
        cameras_config = self._identificar_cameras(config)
        if not cameras_config:
            print("‚ùå Nenhuma c√¢mera encontrada no arquivo de configura√ß√£o!")
            return None
        
        print(f"üìπ Encontradas {len(cameras_config)} c√¢mera(s) configurada(s):")
        for cam in cameras_config:
            print(f"   - C√¢mera {cam['id']}: {cam['ip']} ({cam['usuario']})")
        
        print("\n" + "="*60 + "\n")
        
        # Conecta e obt√©m informa√ß√µes de cada c√¢mera
        informacoes_cameras = {}
        
        for cam in cameras_config:
            print(f"üîç PROCESSANDO C√ÇMERA {cam['id']} - {cam['ip']}")
            print("-" * 50)
            
            camera, device_service = self._conectar_camera_onvif(
                cam['ip'], cam['porta'], cam['usuario'], cam['senha']
            )
            
            if camera and device_service:
                informacoes = self._obter_informacoes_dispositivo(camera, device_service, cam['ip'])
                # Organiza informa√ß√µes de forma mais estruturada
                camera_info = {
                    'camera_id': cam['id'],
                    'configuracao': {
                        'ip': cam['ip'],
                        'rtsp_url': cam['rtsp_url'],
                        'usuario': cam['usuario']
                    },
                    'dispositivo': {
                        'fabricante': informacoes.get('fabricante', 'N/A'),
                        'modelo': informacoes.get('modelo', 'N/A'),
                        'serial_number': informacoes.get('serial_number', 'N/A'),
                        'device_uuid': informacoes.get('device_uuid', 'N/A'),
                        'firmware_version': informacoes.get('firmware_version', 'N/A'),
                        'hardware_id': informacoes.get('hardware_id', 'N/A')
                    },
                    'conexao': {
                        'status': informacoes.get('status_conexao', 'desconhecido'),
                        'timestamp': informacoes.get('timestamp', 'N/A'),
                        'capacidades': informacoes.get('capacidades', {}),
                        'rede': informacoes.get('rede', {}),
                        'horario_sistema': informacoes.get('horario_sistema', {})
                    }
                }
                informacoes_cameras[f"camera_{cam['id']}"] = camera_info
            else:
                informacoes_cameras[f"camera_{cam['id']}"] = {
                    'camera_id': cam['id'],
                    'configuracao': {
                        'ip': cam['ip'],
                        'rtsp_url': cam['rtsp_url'],
                        'usuario': cam['usuario']
                    },
                    'dispositivo': {
                        'fabricante': 'N/A',
                        'modelo': 'N/A',
                        'serial_number': 'N/A',
                        'device_uuid': 'N/A',
                        'firmware_version': 'N/A',
                        'hardware_id': 'N/A'
                    },
                    'conexao': {
                        'status': 'falha_conexao',
                        'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                        'erro': 'N√£o foi poss√≠vel conectar via ONVIF'
                    }
                }
            
            print("\n" + "="*60 + "\n")
        
        # Salva as informa√ß√µes
        arquivo_salvo = self._salvar_informacoes(informacoes_cameras)
        
        # Resumo final
        self._exibir_resumo_final(informacoes_cameras, arquivo_salvo)
        
        return informacoes_cameras
    
    def _gerar_uuid_dispositivo(self, serial_number, fabricante="Motorola", modelo="MTIDM022603"):
        """Gera um UUID baseado no serial number do dispositivo"""
        try:
            # Namespace personalizado para c√¢meras Motorola
            namespace_motorola = uuid.uuid5(uuid.NAMESPACE_DNS, f"{fabricante.lower()}.cameras.{modelo.lower()}")
            
            # Gera UUID determin√≠stico baseado no serial
            device_uuid = uuid.uuid5(namespace_motorola, serial_number)
            
            return str(device_uuid)
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Erro ao gerar UUID: {e}")
            # Fallback: gera UUID baseado apenas no serial
            return str(uuid.uuid5(uuid.NAMESPACE_DNS, serial_number))

    def _carregar_configuracoes(self):
        """Carrega as configura√ß√µes do arquivo config.env"""
        config = {}
        config_path = Path(__file__).parent.parent / "config.env"
        
        if not config_path.exists():
            print(f"‚ùå Arquivo de configura√ß√£o n√£o encontrado: {config_path}")
            return None
        
        with open(config_path, 'r', encoding='utf-8') as f:
            for linha in f:
                linha = linha.strip()
                if linha and not linha.startswith('#') and '=' in linha:
                    chave, valor = linha.split('=', 1)
                    config[chave.strip()] = valor.strip()
        
        return config

    def _identificar_cameras(self, config):
        """Identifica as c√¢meras configuradas"""
        cameras_config = []
        for i in range(1, 10):  # Procura at√© CAMERA_10
            camera_key = f'IP_CAMERA_{i}'
            if camera_key in config:
                rtsp_url = config[camera_key]
                ip, porta, usuario, senha = self._extrair_credenciais_rtsp(rtsp_url)
                
                if ip:
                    cameras_config.append({
                        'id': i,
                        'ip': ip,
                        'porta': porta,
                        'usuario': usuario,
                        'senha': senha,
                        'rtsp_url': rtsp_url
                    })
        return cameras_config

    def _extrair_credenciais_rtsp(self, rtsp_url):
        """Extrai IP, usu√°rio e senha da URL RTSP"""
        try:
            parsed = urlparse(rtsp_url)
            ip = parsed.hostname
            porta = parsed.port or 554
            usuario = parsed.username or 'admin'
            senha = parsed.password or ''
            return ip, porta, usuario, senha
        except Exception as e:
            print(f"‚ùå Erro ao analisar URL RTSP: {e}")
            return None, None, None, None

    def _conectar_camera_onvif(self, ip, porta, usuario, senha):
        """Conecta na c√¢mera usando ONVIF"""
        try:
            print(f"üîÑ Conectando na c√¢mera {ip}:{porta}...")
            
            # Tenta conectar na c√¢mera ONVIF (porta padr√£o 80)
            camera = ONVIFCamera(ip, 80, usuario, senha)
            
            # Testa a conex√£o
            device_service = camera.devicemgmt
            device_info = device_service.GetDeviceInformation()
            
            print(f"‚úÖ Conex√£o ONVIF estabelecida com {ip}")
            return camera, device_service
            
        except ONVIFError as e:
            print(f"‚ùå Erro ONVIF ao conectar em {ip}: {e}")
        except Exception as e:
            print(f"‚ùå Erro geral ao conectar em {ip}: {e}")
            
        return None, None

    def _obter_informacoes_dispositivo(self, camera, device_service, ip):
        """Obt√©m informa√ß√µes completas do dispositivo"""
        informacoes = {
            'ip': ip,
            'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'status_conexao': 'conectado'
        }
        
        try:
            # Informa√ß√µes b√°sicas do dispositivo
            print(f"üìã Obtendo informa√ß√µes do dispositivo {ip}...")
            device_info = device_service.GetDeviceInformation()
            
            # Gera UUID baseado no serial number
            device_uuid = self._gerar_uuid_dispositivo(
                device_info.SerialNumber, 
                device_info.Manufacturer, 
                device_info.Model
            )
            
            informacoes.update({
                'fabricante': device_info.Manufacturer,
                'modelo': device_info.Model,
                'firmware_version': device_info.FirmwareVersion,
                'serial_number': device_info.SerialNumber,
                'hardware_id': device_info.HardwareId,
                'device_uuid': device_uuid
            })
            
            print(f"   üì± Fabricante: {device_info.Manufacturer}")
            print(f"   üè∑Ô∏è  Modelo: {device_info.Model}")
            print(f"   üî¢ N√∫mero de S√©rie: {device_info.SerialNumber}")
            print(f"   üÜî Device UUID: {device_uuid}")
            print(f"   üíæ Firmware: {device_info.FirmwareVersion}")
            print(f"   üîß Hardware ID: {device_info.HardwareId}")
            
        except Exception as e:
            print(f"   ‚ùå Erro ao obter informa√ß√µes b√°sicas: {e}")
            informacoes['erro_info_basicas'] = str(e)
        
        # Resto das informa√ß√µes (capacidades, rede, hor√°rio) - mantido igual
        try:
            # Capacidades essenciais do dispositivo
            print(f"   üîç Obtendo capacidades...")
            capabilities = device_service.GetCapabilities()
            
            informacoes['capacidades'] = {
                'onvif_service_url': 'N/A',
                'media_service': False,
                'ptz_service': False,
                'imaging_service': False,
                'events_service': False
            }
            
            if hasattr(capabilities, 'Device') and capabilities.Device:
                if hasattr(capabilities.Device, 'XAddr'):
                    informacoes['capacidades']['onvif_service_url'] = capabilities.Device.XAddr
                    
            if hasattr(capabilities, 'Media') and capabilities.Media:
                informacoes['capacidades']['media_service'] = True
                
            if hasattr(capabilities, 'PTZ') and capabilities.PTZ:
                informacoes['capacidades']['ptz_service'] = True
                
            if hasattr(capabilities, 'Imaging') and capabilities.Imaging:
                informacoes['capacidades']['imaging_service'] = True
                
            if hasattr(capabilities, 'Events') and capabilities.Events:
                informacoes['capacidades']['events_service'] = True
                    
        except Exception as e:
            print(f"   ‚ö†Ô∏è  Aviso ao obter capacidades: {e}")
            informacoes['aviso_capacidades'] = str(e)
        
        try:
            # Configura√ß√µes de rede simplificadas
            print(f"   üåê Obtendo configura√ß√µes de rede...")
            network_interfaces = device_service.GetNetworkInterfaces()
            
            informacoes['rede'] = {
                'interface_ativa': False,
                'endereco_ip': 'N/A',
                'mascara_rede': 'N/A',
                'interface_nome': 'N/A'
            }
            
            if network_interfaces and len(network_interfaces) > 0:
                interface = network_interfaces[0]  # Primeira interface
                informacoes['rede']['interface_ativa'] = getattr(interface, 'Enabled', False)
                informacoes['rede']['interface_nome'] = getattr(interface, 'token', 'N/A')
                
                if hasattr(interface, 'IPv4') and interface.IPv4:
                    if hasattr(interface.IPv4, 'Config') and interface.IPv4.Config:
                        if hasattr(interface.IPv4.Config, 'Manual') and interface.IPv4.Config.Manual:
                            manual = interface.IPv4.Config.Manual[0]  # Primeira configura√ß√£o manual
                            informacoes['rede']['endereco_ip'] = getattr(manual, 'Address', 'N/A')
                            informacoes['rede']['mascara_rede'] = getattr(manual, 'PrefixLength', 'N/A')
                    
        except Exception as e:
            print(f"   ‚ö†Ô∏è  Aviso ao obter configura√ß√µes de rede: {e}")
            informacoes['aviso_rede'] = str(e)
        
        try:
            # Hor√°rio do sistema simplificado
            print(f"   üïê Obtendo hor√°rio do sistema...")
            system_time = device_service.GetSystemDateAndTime()
            
            informacoes['horario_sistema'] = {
                'timezone': 'N/A',
                'horario_local': 'N/A',
                'sincronizado': False
            }
            
            if system_time:
                if hasattr(system_time, 'TimeZone') and system_time.TimeZone:
                    informacoes['horario_sistema']['timezone'] = getattr(system_time.TimeZone, 'TZ', 'N/A')
                
                if hasattr(system_time, 'LocalDateTime') and system_time.LocalDateTime:
                    local_dt = system_time.LocalDateTime
                    if hasattr(local_dt, 'Date') and hasattr(local_dt, 'Time'):
                        date_part = local_dt.Date
                        time_part = local_dt.Time
                        informacoes['horario_sistema']['horario_local'] = f"{date_part.Year:04d}-{date_part.Month:02d}-{date_part.Day:02d} {time_part.Hour:02d}:{time_part.Minute:02d}:{time_part.Second:02d}"
                        informacoes['horario_sistema']['sincronizado'] = True
                
        except Exception as e:
            print(f"   ‚ö†Ô∏è  Aviso ao obter hor√°rio: {e}")
            informacoes['aviso_horario'] = str(e)
        
        return informacoes

    def _salvar_informacoes(self, informacoes_cameras):
        """Salva as informa√ß√µes em arquivo JSON na pasta device_config"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        nome_arquivo = f"camera_onvif_info_{timestamp}.json"
        caminho_arquivo = self.device_config_dir / nome_arquivo
        
        try:
            with open(caminho_arquivo, 'w', encoding='utf-8') as f:
                json.dump(informacoes_cameras, f, indent=2, ensure_ascii=False)
            
            print(f"\nüíæ Informa√ß√µes salvas em: device_config/{nome_arquivo}")
            return str(caminho_arquivo)
            
        except Exception as e:
            print(f"‚ùå Erro ao salvar arquivo: {e}")
            return None

    def _exibir_resumo_final(self, informacoes_cameras, arquivo_salvo):
        """Exibe resumo final das informa√ß√µes obtidas"""
        print("üìä === RESUMO FINAL ===")
        print(f"Total de c√¢meras processadas: {len(informacoes_cameras)}")
        
        for camera_key, info in informacoes_cameras.items():
            status = "‚úÖ CONECTADA" if info['conexao']['status'] == 'conectado' else "‚ùå FALHA"
            device_id = info['dispositivo'].get('serial_number', 'N/A')
            device_uuid = info['dispositivo'].get('device_uuid', 'N/A')
            modelo = info['dispositivo'].get('modelo', 'N/A')
            ip = info['configuracao'].get('ip', 'N/A')
            
            print(f"{camera_key.upper()}: {status}")
            print(f"   IP: {ip}")
            print(f"   Device ID/Serial: {device_id}")
            print(f"   Device UUID: {device_uuid}")
            print(f"   Modelo: {modelo}")
            print()
        
        if arquivo_salvo:
            caminho_relativo = Path(arquivo_salvo).relative_to(Path.cwd())
            print(f"üìÅ Arquivo completo salvo em: {caminho_relativo}")


# Fun√ß√µes legacy para compatibilidade com execu√ß√£o direta
def gerar_uuid_dispositivo(serial_number, fabricante="Motorola", modelo="MTIDM022603"):
    """Fun√ß√£o legacy - usa o gerenciador"""
    manager = ONVIFDeviceManager()
    return manager._gerar_uuid_dispositivo(serial_number, fabricante, modelo)

def carregar_configuracoes():
    """Fun√ß√£o legacy - usa o gerenciador"""
    manager = ONVIFDeviceManager()
    return manager._carregar_configuracoes()

def extrair_credenciais_rtsp(rtsp_url):
    """Fun√ß√£o legacy - usa o gerenciador"""
    manager = ONVIFDeviceManager()
    return manager._extrair_credenciais_rtsp(rtsp_url)

def conectar_camera_onvif(ip, porta, usuario, senha):
    """Fun√ß√£o legacy - usa o gerenciador"""
    manager = ONVIFDeviceManager()
    return manager._conectar_camera_onvif(ip, porta, usuario, senha)

def obter_informacoes_dispositivo(camera, device_service, ip):
    """Fun√ß√£o legacy - usa o gerenciador"""
    manager = ONVIFDeviceManager()
    return manager._obter_informacoes_dispositivo(camera, device_service, ip)

def salvar_informacoes(informacoes_cameras):
    """Fun√ß√£o legacy - usa o gerenciador"""
    manager = ONVIFDeviceManager()
    return manager._salvar_informacoes(informacoes_cameras)

def main():
    """Fun√ß√£o principal quando executado diretamente"""
    print("üé• === SCANNER DE INFORMA√á√ïES DE C√ÇMERAS ONVIF ===")
    print("   Espec√≠fico para Motorola IP DOME 2MP MTIDM022603")
    print("   üìã Inclui gera√ß√£o de UUID baseado no Device ID/Serial")
    print("   üìÅ JSON salvo na pasta device_config/\n")
    
    manager = ONVIFDeviceManager()
    informacoes = manager.obter_informacoes_cameras()
    
    if informacoes:
        print("\n‚úÖ Processo conclu√≠do com sucesso!")
    else:
        print("\n‚ùå Processo conclu√≠do com problemas!")

if __name__ == "__main__":
    main()